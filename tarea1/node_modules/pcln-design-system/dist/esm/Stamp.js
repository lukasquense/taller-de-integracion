function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  display: inline-flex;\n  align-items: center;\n  vertical-align: top;\n  min-height: 24px;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: ", ";\n  border-radius: 2px;\n  border-width: 1px;\n  border-style: solid;\n  border-color: ", ";\n  color: ", ";\n  ", "\n  \n  ", " ", ";\n  ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import styled from 'styled-components';
import { themeGet, space, fontSize } from 'styled-system';
import { applyVariations, getPaletteColor, deprecatedColorValue, deprecatedPropType } from './utils';
var Stamp = styled.div(_templateObject(), themeGet('letterSpacings.caps'), function (props) {
  return getPaletteColor(props.borderColor, 'base')(props);
}, getPaletteColor('base'), function (props) {
  return props.bg ? "background-color: ".concat(getPaletteColor(props.bg, 'base')(props), ";") : '';
}, space, fontSize, applyVariations('Stamp'));
Stamp.displayName = 'Stamp';
Stamp.propTypes = _objectSpread({}, space.propTypes, {}, fontSize.propTypes, {
  color: deprecatedColorValue(),
  bg: deprecatedPropType('color'),
  borderColor: deprecatedColorValue()
});
Stamp.defaultProps = {
  px: 1,
  py: 0,
  color: 'border.light',
  bg: 'background.light',
  borderColor: 'border.base',
  fontSize: 0
};
export default Stamp;