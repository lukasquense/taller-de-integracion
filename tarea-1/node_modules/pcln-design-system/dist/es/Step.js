function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  background-color: ", ";\n  color: ", ";\n  cursor: ", ";\n  padding: 0;\n  font-weight: unset;\n\n  &:hover {\n    background-color: ", ";\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { Check } from 'pcln-icons';
import Button from './Button';
import Text from './Text';
import { getPaletteColor } from './utils';
var StepperFlex = styled(Button)(_templateObject(), getPaletteColor('background.lightest'), getPaletteColor('base'), function (props) {
  return props.onClick ? 'pointer' : 'default';
}, getPaletteColor('background.lightest'));

function Step(_ref) {
  var className = _ref.className,
      active = _ref.active,
      completed = _ref.completed,
      children = _ref.children,
      onClick = _ref.onClick;
  var color = active || completed ? 'primary' : 'text.light';
  return React.createElement(StepperFlex, {
    className: className,
    alignItems: "center",
    onClick: onClick
  }, completed && React.createElement(Check, {
    color: "primary",
    size: 16,
    mr: 1,
    "aria-hidden": false,
    "aria-label": "Step Completed"
  }), React.createElement(Text, {
    color: color,
    bold: active,
    fontSize: 1,
    "aria-selected": active
  }, children));
}

Step.displayName = 'Step';
Step.propTypes = {
  className: PropTypes.string,
  active: PropTypes.bool,
  completed: PropTypes.bool,
  children: PropTypes.node.isRequired,
  onClick: PropTypes.func
};
Step.defaultProps = {
  className: '',
  active: false,
  completed: false
};
export default Step;