function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  border-radius: ", ";\n  border: 0;\n  display: inline-block;\n  font-weight: ", ";\n  font-family: inherit;\n  cursor: pointer;\n  background-color: ", ";\n  color: ", ";\n  ", " ", ";\n  &:hover {\n    background-color: ", ";\n  }\n  ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import PropTypes from 'prop-types';
import styled from 'styled-components';
import { space, fontSize } from 'styled-system';
import { applyVariations, getPaletteColor, deprecatedColorValue, deprecatedPropType } from './utils';
var ToggleBadge = styled.button(_templateObject(), function (props) {
  return props.theme.radius;
}, function (props) {
  return props.theme.bold;
}, function (props) {
  return props.selected ? getPaletteColor(props.bg || props.color, 'light')(props) : props.unSelectedBg;
}, getPaletteColor('base'), space, fontSize, function (props) {
  return getPaletteColor(props.bg || props.color, 'light')(props);
}, applyVariations('ToggleBadge'));
ToggleBadge.displayName = 'ToggleBadge';
ToggleBadge.propTypes = _objectSpread({
  selected: PropTypes.bool
}, space.propTypes, {}, fontSize.propTypes, {
  color: deprecatedColorValue(),
  bg: deprecatedPropType('color')
});
ToggleBadge.defaultProps = {
  selected: false,
  px: 2,
  py: 1,
  mx: 1,
  my: 1,
  fontSize: 0,
  color: 'primary',
  unSelectedBg: 'transparent'
};
export default ToggleBadge;