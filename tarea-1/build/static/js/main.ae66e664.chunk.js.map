{"version":3,"sources":["components/Episodes/EpisodesView.js","utils/hooks/useFetch.js","components/Episodes/EpisodesContainer.js","components/Episode/EpisodeView.js","components/Episode/EpisodeContainer.js","components/Character/CharacterView.js","components/Character/CharacterContainer.js","components/Location/LocationView.js","components/Location/LocationContainer.js","App.js","serviceWorker.js","index.js"],"names":["Episodes","info","results","className","count","map","episode","key","id","to","name","air_date","url","useState","response","setResponse","error","setError","useEffect","a","fetch","res","json","newPage","newJson","next","concat","fetchData","resp","useFetch","EpisodesView","CharacterDetail","Episode","result","characters","char","props","match","params","console","log","EpisodeView","EpisodeDetail","LocationDetail","Character","status","species","type","gender","origin","location","src","image","epi","CharacterView","Location","dimension","residents","LocationView","history","createBrowserHistory","App","path","exact","render","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ae66e664.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Episodes = ({ info, results }) => (\r\n  <div className=\"container\">\r\n    <div className=\"section columns\">\r\n      <div className=\"column is-8 is-offset-2\">\r\n        <h2 className=\"title has-text-centered\">{info.count}</h2>\r\n\r\n        <table className=\"table is-bordered is-striped is-narrow\">\r\n          <thead>\r\n            <tr>\r\n              <th>Episode name</th>\r\n              <th>Air Date</th>\r\n              <th>Episode Code</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {results.map(episode => (\r\n              <tr key={episode.id}>\r\n                <td>\r\n                  <Link to={\"/episode/\" + episode.id}>{episode.name}</Link>\r\n                </td>\r\n                <td>{episode.air_date}</td>\r\n                <td>{episode.episode}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Episodes;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport default url => {\r\n  const [response, setResponse] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const res = await fetch(url);\r\n        const json = await res.json();\r\n        // Revisar si hay otra pagina\r\n        var newPage = null;\r\n        var newJson = null;\r\n        var next = json.info && json.info.next ? json.info.next : null;\r\n        while (next) {\r\n          newPage = await fetch(next);\r\n          newJson = await newPage.json();\r\n          json.results = json.results.concat(newJson.results);\r\n          next = newJson.next;\r\n        }\r\n        setResponse(json);\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [url]);\r\n  return { response, error };\r\n};\r\n","import React from \"react\";\r\nimport EpisodesView from \"./EpisodesView\";\r\nimport { useFetch } from \"utils/hooks\";\r\n\r\nconst Episodes = () => {\r\n  const resp = useFetch(\"https://rickandmortyapi.com/api/episode\");\r\n  if (!resp.response) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  return (\r\n    <EpisodesView info={resp.response.info} results={resp.response.results} />\r\n  );\r\n};\r\n\r\nexport default Episodes;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useFetch } from \"utils/hooks\";\r\n\r\nconst Episode = ({ result }) => (\r\n  <div className=\"container\">\r\n    <div className=\"section columns\">\r\n      <div className=\"column is-8 is-offset-2\">\r\n        <h2 className=\"title has-text-centered\">{result.name}</h2>\r\n\r\n        <div className=\"box\">\r\n          <article className=\"media\">\r\n            <div className=\"media-left\">\r\n            </div>\r\n            <div className=\"media-content\">\r\n              <div className=\"content\">\r\n                <aside className=\"menu\">\r\n                  <p className=\"menu-label\">Basic Information</p>\r\n                  <ul className=\"menu-list\">\r\n                    <li>\r\n                      <strong>Air date:</strong> {result.air_date}\r\n                    </li>\r\n                    <li>\r\n                      <strong>Episode code:</strong> {result.episode}\r\n                    </li>\r\n                  </ul>\r\n                </aside>\r\n              </div>\r\n            </div>\r\n            <div className=\"media-right\">\r\n              <Link to=\"/\" className=\"button\">\r\n                Home\r\n              </Link>\r\n            </div>\r\n          </article>\r\n        </div>\r\n\r\n        <div className=\"box\">\r\n          <h2 className=\"title has-text-centered\">Characters</h2>\r\n\r\n          <div className=\"content has-text-centered\">\r\n            <ul>\r\n              {result.characters.map(char => (\r\n                <CharacterDetail url={char} />\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst CharacterDetail = ({ url }) => {\r\n  const { response } = useFetch(url);\r\n  if (!response) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  return (\r\n    <div>\r\n      <Link to={\"/character/\" + response.id}>{response.name}</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Episode;\r\n","import React from \"react\";\r\nimport { useFetch } from \"utils/hooks\";\r\nimport EpisodeView from \"./EpisodeView\";\r\n\r\nconst Episode = ({ props }) => {\r\n  const { response } = useFetch(\r\n    `https://rickandmortyapi.com/api/episode/${props.match.params.id}`\r\n  );\r\n  if (!response) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  console.log(response);\r\n  return <EpisodeView result={response} />;\r\n};\r\n\r\nexport default Episode;\r\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useFetch } from \"utils/hooks\";\n\nconst Character = ({ result }) => (\n  <div className=\"container\">\n    <div className=\"section columns\">\n      <div className=\"column is-8 is-offset-2\">\n        <h2 className=\"title has-text-centered\">{result.name}</h2>\n\n        <div className=\"box\">\n          <article className=\"media\">\n            <div className=\"media-left\">\n            </div>\n            <div className=\"media-content\">\n              <div className=\"content\">\n                <aside className=\"menu\">\n                  <p className=\"menu-label\">Basic Information</p>\n\n                  <ul className=\"menu-list\">\n                    <li>\n                      <strong>Status:</strong> {result.status}\n                    </li>\n                    <li>\n                      <strong>Species:</strong> {result.species}\n                    </li>\n                    <li>\n                      <strong>Type:</strong> {result.type}\n                    </li>\n                    <li>\n                      <strong>Gender:</strong> {result.gender}\n                    </li>\n                    <li>\n                      <strong>Origin:</strong> <LocationDetail url={result.origin.url} />\n                    </li>\n                    <li>\n                    <strong>Location:</strong> <LocationDetail url={result.location.url} />\n                    </li>\n                    \n                    <li>\n                      <img src= {result.image} />\n                    </li>\n                    \n                  </ul>\n                </aside>\n              </div>\n            </div>\n            <div className=\"media-right\">\n              <Link to=\"/\" className=\"button\">\n                Home\n              </Link>\n            </div>\n          </article>\n        </div>\n\n        <div className=\"box\">\n          <h2 className=\"title has-text-centered\">Episodes where appears</h2>\n\n          <div className=\"content has-text-centered\">\n            <ul>\n              {result.episode.map(epi => (\n                <EpisodeDetail url={epi} />\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nconst EpisodeDetail = ({ url }) => {\n  const { response } = useFetch(url);\n  if (!response) {\n    return <div>Loading...</div>;\n  }\n  return (\n    <div>\n      <Link to={\"/episode/\" + response.id}>{response.name}</Link>\n    </div>\n  );\n};\n\nconst LocationDetail = ({ url }) => {\n    const { response } = useFetch(url);\n    if (!response) {\n      return <div>Loading...</div>;\n    }\n    return (\n      <div>\n        <Link to={\"/location/\" + response.id}>{response.name}</Link>\n      </div>\n    );\n  };\n\nexport default Character;","import React from \"react\";\nimport { useFetch } from \"utils/hooks\";\nimport CharacterView from \"./CharacterView\";\n\nconst Character = ({ props }) => {\n  const { response } = useFetch(\n    `https://rickandmortyapi.com/api/character/${props.match.params.id}`\n  );\n  if (!response) {\n    return <div>Loading...</div>;\n  }\n  console.log(response);\n  return <CharacterView result={response} />;\n};\n\nexport default Character;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useFetch } from \"utils/hooks\";\n\nconst Location = ({ result }) => (\n  <div className=\"container\">\n    <div className=\"section columns\">\n      <div className=\"column is-8 is-offset-2\">\n        <h2 className=\"title has-text-centered\">{result.name}</h2>\n\n        <div className=\"box\">\n          <article className=\"media\">\n            <div className=\"media-left\">\n            </div>\n            <div className=\"media-content\">\n              <div className=\"content\">\n                <aside className=\"menu\">\n                  <p className=\"menu-label\">Basic Information</p>\n\n                  <ul className=\"menu-list\">\n                    <li>\n                      <strong>Type:</strong> {result.type}\n                    </li>\n                    <li>\n                      <strong>Dimension:</strong> {result.dimension}\n                    </li>\n                  </ul>\n                </aside>\n              </div>\n            </div>\n            <div className=\"media-right\">\n              <Link to=\"/\" className=\"button\">\n                Home\n              </Link>\n            </div>\n          </article>\n        </div>\n\n        <div className=\"box\">\n          <h2 className=\"title has-text-centered\">Characters who visit it</h2>\n\n          <div className=\"content has-text-centered\">\n            <ul>\n              {result.residents.map(res => (\n                <CharacterDetail url={res} />\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nconst CharacterDetail = ({ url }) => {\n    const { response } = useFetch(url);\n    if (!response) {\n      return <div>Loading...</div>;\n    }\n    return (\n      <div>\n        <Link to={\"/character/\" + response.id}>{response.name}</Link>\n      </div>\n    );\n  };\n\nexport default Location;","import React from \"react\";\nimport { useFetch } from \"utils/hooks\";\nimport LocationView from \"./LocationView\";\n\nconst Location = ({ props }) => {\n  const { response } = useFetch(\n    `https://rickandmortyapi.com/api/location/${props.match.params.id}`\n  );\n  if (!response) {\n    return <div>Loading...</div>;\n  }\n  console.log(response);\n  return <LocationView result={response} />;\n};\n\nexport default Location;\n","import React from \"react\";\nimport { Switch, Route, Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport Episodes from \"components/Episodes\";\nimport Episode from \"components/Episode\";\nimport Character from \"components/Character\";\nimport Location from \"components/Location\";\n\nconst history = createBrowserHistory();\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router history={history}>\n        <Switch>\n          <Route path=\"/\" exact render={() => <Episodes />} />\n          <Route\n            path=\"/episode/:id\"\n            exact\n            render={props => <Episode props={props} />}\n          />\n          <Route\n            path=\"/character/:id\"\n            exact\n            render={props => <Character props={props} />}\n          />\n          <Route\n            path=\"/location/:id\"\n            exact\n            render={props => <Location props={props} />}\n          />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}